import java.io.*;
import java.util.*;

// main class which controls the game,sets mode,plays game and sets score
class MasterMind
{
 private Scanner sc;
 private String input;
 static int lives = 8;
 static int codemakerScore = 0;
 static Player waitingPlayer;
 static Player currentPlayer;
 static boolean firstTime = true;
 static boolean loser = false;
 //boolean value indicates the play wins the game
 private boolean winner;
 //class object Guess compares the guesses to the code 
 //and provides scores of each game including hits and number of guesses
 private Guess guessEvaluator;
 private int totalHits;
 private int totalGuesses;
 private int guessCount;
 //two-dimensional array stores all guesses and feedback
 private char[][] guess;
 private static char[][] feedback;
 //char array stores the code generated by the computer
 private static char[] code;
 //class object Code generates the code for each game
 private Code codeGenerator;
 //user decides which mode to use.
 private static int mode;
 private static int simplifiedMode = 1;
 private static int normalMode = 2;
 private static int onePlayerModeHuman = 3;
 private static int onePlayerModeComputer = 4;
 
  public MasterMind(int mode)
 {
  MasterMind.mode = mode;
  sc = new Scanner(System.in);
  winner = false;
  totalHits = 0;
  codeGenerator = new Code(onePlayerModeHuman);
  code = codeGenerator.getCode();
  totalGuesses = 0;
  guessCount = 0;
  guess = new char[30][mode - 1];
  feedback = new char[30][mode - 1];
 }//MasterMind constructor with mode setting
 
 public MasterMind() 
 {
  sc = new Scanner(System.in);
 }//MasterMind constructor
 
 public static void main(String[] args)throws IOException
 {
  //make sure the input is in correct format
  boolean successfulStart = false;
  
  MasterMind MMGame;
  int mode = 0;
  
  //a loop generates multiple games as long as the play would like to continue
  do
  {
   successfulStart = false;
   
   //a minimal initialized game enables the keyboard input
   MMGame = new MasterMind();
   if(firstTime)
   {
    //display welcome message
    MMGame.welcomeMessage();
   }  
   //ask user to play or quit the game
   successfulStart = MMGame.likeToPlayQuestion();
   
   //check the answer from the user and starts the game
   if (successfulStart)
   {
    //ask the user for the difficulty level of the game, 4 modes
    MMGame.setMode();
    
    //generate a new game with the user-defined mode setting
    mode = MMGame.getMode();
    MMGame = new MasterMind(mode);
    
    //asks users to enter their name
    MMGame.enterName();
    
    //generate code based on the user-defined mode
    MMGame.codeGenerator = new Code(mode);
    MMGame.code = MMGame.codeGenerator.getCode();
    
    //a loop asks the user to input all the guesses, each loop generates one guess
    //displays the feedback, scores and total number of guesses at the end of each guess
    do
    {
     //ask the user to input one guess 
     //store each guess into the two-dimensional array
     MMGame.guess[MMGame.totalGuesses] = MMGame.getGuess();
     //compares the guess to the code
     MMGame.guessEvaluator = new Guess(MMGame.guess[MMGame.totalGuesses], MMGame.code);
     //check whether the user wins the game
     MMGame.winner = MMGame.guessEvaluator.evaluateGuess();
     //store each feedback into the two-dimensional array for each guess
     MMGame.feedback[MMGame.totalGuesses] = MMGame.guessEvaluator.getFeedback();
     //calculate the total score from scores of individual guesses
     //Perfect match earns 2 points, close match earns 1 point
     MMGame.totalHits += MMGame.guessEvaluator.getSingleHits();
     // Compute the total number of guesses
     MMGame.guessCount++;
     MMGame.lives--;
     if (lives == 0)   
     {
      loser = true;
     }
     //display the feedback for each guess
     System.out.print("Lives left:"+ lives);
     System.out.print("\nYour hits: ");
     if(mode == simplifiedMode)
     {for (int i = 0; i <= feedback[MMGame.totalGuesses].length - 1; i++)
      {
       System.out.print(feedback[MMGame.totalGuesses][i] + " ");
      }     
     }
     else
     for(int i = MMGame.feedback[MMGame.totalGuesses].length - 1; i >= 0; i--)
     System.out.print(MMGame.feedback[MMGame.totalGuesses][i] + " ");
     System.out.println("\n* = right colour and right position, 2 points\n" +
          "+ = right colour but wrong position, 1 point\n" + 
          "_, colour not present");
     System.out.println("--------------------------------------------------------------------");
     //display the total points from scores of both players in 2 player mode
     if(mode == simplifiedMode || mode == normalMode)
     {
      MMGame.codemakerScore ++;
      System.out.println("Total codemaker points earned: " + MMGame.codemakerScore + "  ");
     }
     //display the total points from scores of individual guesses
     System.out.print("Total codebreaker points earned: " + MMGame.totalHits + "  ");
     //calculate and display the number of guesses that the user made
     MMGame.totalGuesses ++;
     System.out.println("Total number of guesses: " + MMGame.totalGuesses);
     System.out.println("********************************************************************"); 
    }
    //check whether the user wins the game
    //if not, ask the user whether continue the game or start over or need a hint before next guess
    while (!loser && !MMGame.winner && MMGame.continueCurrentGame());
    
    
    //the current game ends if the user loses all lives
    if (loser)
    { // Show code and score
     codemakerScore ++;
     System.out.println("You lose!");
     System.out.println("Total codemaker points earned: " + MMGame.codemakerScore + "  ");
     System.out.println("Total codebreaker points earned: " + MMGame.totalHits + "  "); 
     System.out.println("The code was: " + Arrays.toString(code)); 
     System.out.println("********************************************************************");       
    }
    //the current game ends if the user wins the game
    if (MMGame.winner)
    {
      // Show Congratulations and single game stats     
     System.out.println("Congratulations! You win!");  
     System.out.println("********************************************************************");  
     System.out.println("It took you " + MMGame.guessCount + " guesses.");  
     System.out.println("You Averaged " + MMGame.totalHits / ((double) MMGame.guessCount) + " Points Per Guess.");  
       }     
   }
   //game over if the user is not ready for the game
   else
   {
   break;
   }
  }
  //a new game will start if the user is ready for a new game
  while (successfulStart);
 }
 public static void welcomeMessage()
 {
 System.out.println("*****Welcome to Mastermind.****** \n\n"
     + "This is a text version of Mastermind.\n"
     + "The code consists of 4 colours from a possible six:\n"
     + "R (Red), Y (Yellow), O (Orange), G (Green), B (Blue) and I (Indigo).\n"
     + "A colour may appear more than once in the code. \n\n"
     + "You try to guess what colours are in the code and in what order.\n"
     + "After making a guess the result will be displayed. \n"
     + "A result consists of a (*) for each colour in your guess where both colour and position are correct.\n"
     + "For each colour in the guess that is the correct colour, "
     + "but is out of position, you get a (+). \n"
     + "When entering guesses you only need to enter the first character of the colour. \n\n"
     + "If you guess the code within eight attempts, you win. Otherwise you lose. \n");
     firstTime = false;
 }    
 public boolean likeToPlayQuestion() throws IOException
 {
  //keeps track of valid input
  boolean successfulStart = false;
  //a loop prompts the user with the same question if the input is not valid
  do
  {
   System.out.print("Would you like to play MasterMind"); 
   if( !firstTime )
   {
    System.out.print(" again");
   }
    System.out.print("?\n");
    System.out.print("Y for yes or N for no?");
    String entered = sc.nextLine();
   if ( entered.equalsIgnoreCase("y") )
   { 
    successfulStart = true;
    return true;
   }
   else if ( entered.equalsIgnoreCase("n") )
   {
    System.out.println("Thank you for playing! Bye!");
    successfulStart = true;
    return false; 
   }
   else if ( !entered.equals("y") || ( !entered.equals("n") ))
   {
    System.out.println("Invalid Entry");
    successfulStart = false; 
   }
    
  }
  //keep looping if the input is not valid
  while(!successfulStart);
  
  return successfulStart;  
 }
 public void enterName()
 {
  Scanner scanner = new Scanner(System.in);
  if(mode == simplifiedMode || mode == normalMode)
  {
   System.out.println("Codemaker enter your name");
   String p1 = scanner.nextLine().trim();
   System.out.println("Codebreaker enter your name");
   String p2 = scanner.nextLine().trim();
   currentPlayer = new Player(p1);
   waitingPlayer = new Player(p2);
  }
  else
  {
   System.out.println("Codebreaker enter your name");
   String p2 = scanner.nextLine().trim();
   waitingPlayer = new Player(p2);
  }
  
 }
 public boolean setMode()
 {
  //keeps track of valid input
  boolean successfulSetMode = false;
  //a loop prompts the user with the same question if the input is not valid
  do
  {
   System.out.println("Please choose: 1 = simplified mode (simplified 2-player game with position relative feedback) ");
   System.out.println("               2 = normal mode (normal 2-player game with non positional feedback) ");
   System.out.println("               3 = 1 player mode (human as codebreaker) ");
   //System.out.println("               4 = 1 player mode (computer as codebreaker) ");
   input = sc.nextLine();
  
   if (input.equals("1"))
   {
    mode = simplifiedMode;
    successfulSetMode = true;
    return true;
   }
   else if (input.equals("2"))
   {
    mode = normalMode;
    successfulSetMode = true;
    return true;
   }
   else if (input.equals("3"))
   {
    mode = onePlayerModeHuman;
    successfulSetMode = true;
    return true;
   }
   /*else if (input.equals("4"))
   {
    mode = onePlayerModeComputer;
    successfulSetMode = true;
    return true;
   }*/
   else
   {
    System.out.println("Error in reading your input.");
    successfulSetMode = false;
   }
  }
  //keep looping if the input is not valid
  while (!successfulSetMode);
    
  return successfulSetMode;
 }//setMode()
 public int getMode()
 {
  return mode;
 } //getMode()
 public char[] getGuess()
 {
  //user will enter one colour at a time
  int colourPosition = 1;
  //keep track of the valid input for each colour
  boolean successfulGetGuess = false;

  //a loop keeps asking the user to enter the correct number of colours for a guess
  do
  {
   //4 colours need for a guess in the standard mode
   if (mode == simplifiedMode || mode == normalMode || mode == onePlayerModeHuman)
   {
    guess[totalGuesses] = new char[4];
    System.out.println("Codebreaker: "+ waitingPlayer.name);
    System.out.println("Guess the code");
    System.out.println("Please choose four colours from:");
    System.out.println("r = red   o = orange   y = yellow   g = green   b = blue   i = indigo");
    successfulGetGuess = getColourInput(colourPosition);

    for(colourPosition = 2; colourPosition <= 4 && successfulGetGuess; colourPosition ++)
    {
     successfulGetGuess = false;
     successfulGetGuess = getColourInput(colourPosition);
    }   
   }
   //reminds the user if errors occur in the input
   if (!successfulGetGuess)
   {
    System.out.println("Problem with getting your guess.");
   }
  }
  //keep looping if the input is invalid and ask the user whether wants to continue or start over or get a hint
  while  ((!successfulGetGuess) && continueCurrentGame());
   
  //display the guess defined by the user   
  System.out.print("Your guess: ");
  for (int i = 0; i <= guess[totalGuesses].length - 1; i++)
  {
   System.out.print(guess[totalGuesses][i] + " ");
  }
  System.out.println();
  return guess[totalGuesses];   
 }
 public boolean getColourInput(int colourPosition)
 {
  //keeps track of the valid input for each colour
  boolean successfulGetColour = false;
   
  //choose from 6 colours 
  if (mode == simplifiedMode || mode == normalMode || mode == onePlayerModeHuman)
  {
   do
   {
    System.out.print(colourPosition + ": ");
    input = sc.nextLine();
    if ( input.equalsIgnoreCase("r") || input.equalsIgnoreCase("red"))
    {
     guess[totalGuesses][colourPosition - 1] = 'r';
     successfulGetColour = true;
     return true;
    }
    else if (input.equalsIgnoreCase("o") || input.equalsIgnoreCase("orange"))
    {
     guess[totalGuesses][colourPosition - 1] = 'o';
     successfulGetColour = true;
     return true;
    }
    else if (input.equalsIgnoreCase("y") || input.equalsIgnoreCase("yellow"))
    {
     guess[totalGuesses][colourPosition - 1] = 'y';
     successfulGetColour = true;
     return true;
    }
    else if (input.equalsIgnoreCase("g") || input.equalsIgnoreCase("green"))
    {
     guess[totalGuesses][colourPosition - 1] = 'g';
     successfulGetColour = true;
     return true;
    }
    else if (input.equalsIgnoreCase("b") || input.equalsIgnoreCase("blue"))
    {
     guess[totalGuesses][colourPosition - 1] = 'b';
     successfulGetColour = true;
     return true;
    }
    else if (input.equalsIgnoreCase("i") || input.equalsIgnoreCase("indigo"))
    {
     guess[totalGuesses][colourPosition - 1] = 'i';
     successfulGetColour = true;
     return true;
    }
    else
    {
     System.out.println("Error in reading you input."); 
     successfulGetColour = false;
    }
   }
   while (!successfulGetColour);
    
   return successfulGetColour;
  }
  return successfulGetColour;
 }
 public boolean continueCurrentGame()
 {
  boolean successfulContinueCurrentGame = false;
  //loops if the input is not valid
  do
  {
   System.out.println("\nWould you like to continue or start a new game or quit?\n" +
        "c = continue\ns = start a new game\nq = quit.");
   input = sc.nextLine();
    
   //display a summary of all the guesses before continue to enter a new guess
   if (input.equalsIgnoreCase("c"))
   {
    return true;  
   }
   //start a new game
   else if (input.equalsIgnoreCase("s"))
   {
    lives = 8;
    return false;
   }
   else if (input.equalsIgnoreCase("q"))
   {
    System.out.println("Thanks for playing.");
    System.exit(-1);
    return false;
   }
    
   //invalid input
   else
   {
    System.out.println("Error in reading your input.");
    successfulContinueCurrentGame = false;
   }
  }
  //loops if the input is invalid
  while (!successfulContinueCurrentGame);

  return successfulContinueCurrentGame;
 }//continueCurrentGame()
}
// compares guess to code
class Guess
{
 private char[] code;
 private char[] feedback;
 private char[] guess;
 private boolean[] guessUsed;
 private boolean[] codeUsed;
 private int singleHits;
 private static int mode;
 private static int normalMode = 2;
 private static int onePlayerModeHuman = 3;
  
 /**
 * Constructs a mmGuess object which compares two char arrays.
 * @param guess
 * the char array indicates the guess made by the user
 * @param code
 * the char array indicates the code made by the computer
 */
 public Guess(char[] guess, char[] code)
 {
  this.code = code;
  this.guess = guess; 
  feedback = new char[4];
  guessUsed = new boolean[4];
  codeUsed = new boolean[4];
  singleHits = 0;
 }//MMGuess(char[], char[])


 /**
 * Compares the guess to the code and generates the feedback pegs
 * @return checks whether the guess perfectly matches the code
 */
 public boolean evaluateGuess()
 {
  for(int i = 0; i <= code.length - 1; i++)
  {
   feedback[i] = '_';
   guessUsed[i] = false;
   codeUsed[i] = false;
  }
  //checks whether the guessed colour is the perfect match (right colour, right position)
  for (int i = 0; i <= code.length - 1; i++)
  {
   if (guess[i] == code[i] && guessUsed[i] == false && codeUsed[i] == false)
   {
    feedback[i] = '*';
    guessUsed[i] = true;
    codeUsed[i] = true;
    //2 points for a perfect match
    singleHits += 2;
   }
  }
   
  //checks whether the non-perfect matched colour is in the code
  for (int i = 0; i <= code.length - 1; i++)
  {
   if (guessUsed[i] == false)
   {
    for (int j = 0; j <= code.length - 1; j ++)
    {
     if (guess[i] == code[j] && guessUsed[i] == false && codeUsed[j] == false)
     {
      feedback[i] = '+';
      guessUsed[i] = true;
      codeUsed[j] = true;
      //1 point for a close match
      singleHits ++;
     }     
    }
   }
  }
  //check whether the guess perfectly matches the code, if yes, the user wins the game
  if (singleHits == 2 * feedback.length)
  return true;
  else
  return false;
 }//evaluateGuess()
  
 /**
 * Returns the feedback pegs generated by comparing individual colour in the guess and code
 * @return a char array containing the feedback pegs
 */
 public char[] getFeedback() 
 { if(mode == normalMode || mode == onePlayerModeHuman)
  {
   Arrays.sort(feedback);   
  }
  return feedback;
 }
 //getFeedback()


 /**
 * Returns the score of each guess by comparing it to the code
 * @return the score of each guess
 */
 public int getSingleHits() 
 {
  return singleHits;
 }//getSingleHits()

 /**
 * Returns a String object representing this MMGuess object.
 * @Override toString in class Object
 * @return a string representation of this object.
 */
 public String toString() 
 {
  return "Guess [code=" + Arrays.toString(code) + ", feedback="
  + Arrays.toString(feedback) + ", guess=" + Arrays.toString(guess)
  + ", guessUsed=" + Arrays.toString(guessUsed) + ", codeUsed="
  + Arrays.toString(codeUsed) + ", singleHits=" + singleHits + " ]";
 }//toString()   
}
// generates code for one player game and allows code input for two player game
class Code
{
 private Scanner sc;
 private char[] code;
 static Player currentPlayer;
 private static int simplifiedMode = 1;
 private static int normalMode = 2;
 private final int onePlayerModeHuman = 3;

 /**
 * Constructs a new Code object with the user-defined game mode passed from main game
 * @param args
 */
 public Code (int mode) 
 { 
  MasterMind m = new MasterMind();
  sc = new Scanner(System.in);
  // Generate code for onePlayerMode mode: use six colours and four holes
  // Allows duplicate
  if ( mode == onePlayerModeHuman )
  {
   // contain four holes
   code = new char[4];
    
   // randomly select 4 colours from 6 colours
   int rand;
    
   // first colour
   rand = 1 + (int)(Math.random() * 6);
   code[0] = convert(rand);
    
   // second colour
   rand = 1 + (int)(Math.random() * 6);
   code[1] = convert(rand);
    
   // third colour
   rand = 1 + (int)(Math.random() * 6);
   code[2] = convert(rand);
    
   // fourth colour
   rand = 1 + (int)(Math.random() * 6);
   code[3] = convert(rand);
  }
  if( mode == simplifiedMode || mode == normalMode)
  {
   
   // contain four holes
   code = new char[4];
   
   System.out.println("Codemaker: " + m.currentPlayer.name);
   System.out.println("Please set the code");
   System.out.println("Please choose four colours from:");
   System.out.println("r = red   o = orange   y = yellow   g = green   b = blue   i = indigo");
   
   
    
   // first colour
   System.out.print("1:");
   code[0] = sc.next().trim().charAt(0);
    
   // second colour
   System.out.print("2:");
   code[1] = sc.next().trim().charAt(0);
    
   // third colour
   System.out.print("3:");
   code[2] = sc.next().trim().charAt(0);
    
   // fourth colour
   System.out.print("4:");
   code[3] = sc.next().trim().charAt(0);
   
  }
 }//Code(int mode)
 
 /**
 * Converts the random integer into corresponding colour represented by the first character
 * @param codeIndex the position of the colour in the code
 */
 private char convert(int codeIndex) 
 {
  switch ( codeIndex ) 
  {
   //red
   case 1 : return 'r';
   //orange
   case 2 : return 'o';
   //yellow
   case 3 : return 'y';
   //green
   case 4 : return 'g';
   //blue
   case 5 : return 'b';
   //indigo
   case 6 : return 'i';
  }
  return 'x';
 }//convert(int)
   
 /**
 * Returns the code generated by the computer
 */
 public char[] getCode() 
 {
 return code;
 }
}
// allows players take in names
class Player
{
 String name;
 int points;
 Player(String namePassedIn)
 {
  name= namePassedIn;
 }
 void setPoints(int pointsScored)
 {
  points += pointsScored;
 } 
} 
